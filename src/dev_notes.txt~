Port status reporting:

I want to be able to report the status of the ports quickly to the ui in its
own task.

I think that the easiest way to do this is through the tcl scripts generated
by spirent

I think that the task in the python script will kick off a tcl script from
spirent that is an infinite loop.

The main issue with a one off script is that it is constantly going through
some reconfiguration before reporting the status of the ports.  Obviously we
want the ports to be config correctly, but I only should have to do this once
and then constantly report the status of the ports until testing is started.  

This means that I would have to be able to run the script while also having
some return value from the script.  This makes me feel like i CANT have the
tcl script do the infinite loop

Can I separate the config from the actual test?
	- Would have to determine what values need to be transfered into the
	  separate file to run the actual test.
	- We could then ru config before the infinite loop starts and then go
	  into constantly testing

Also do we even have to multithread this application fi we are saying that you
aren't allowed to run the test until the ports are online??
	- i don't think that we are able to run the two scripts at the same
	  time anyways.  One needs to happen unless the other happens.  
		- So the online status is running unless we start a test.  and
		  you can't start a test until the status is online
			- After you finish testing, then we switch back to
			  querying the port status.  


So where do we break the original script??
- i think you want to do everything before run
	- this means we have to have an answer for every variable in "run"
	  func

run proc:
- takes no inputs
	- so are variables pointers??
	-obvously there are certain things that the run function would need.
it needs to know what ports that it is talking to right??


So I am running into issues with including packages in my python script to
call each function individually.  I do not understand what the test script
does that I do not.  I can only assume it is because it is being called using
tclsh that it has access to my pkgIndex file and does everything I need it to
do. 

